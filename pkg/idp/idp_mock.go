// Code generated by MockGen. DO NOT EDIT.
// Source: idp_interface.go

// Package idp is a generated GoMock package.
package idp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	schema "github.com/nautes-labs/base-operator/pkg/schema"
	secret_provider "github.com/nautes-labs/base-operator/pkg/secret_provider"
)

// MockIdp is a mock of Idp interface.
type MockIdp struct {
	ctrl     *gomock.Controller
	recorder *MockIdpMockRecorder
}

// MockIdpMockRecorder is the mock recorder for MockIdp.
type MockIdpMockRecorder struct {
	mock *MockIdp
}

// NewMockIdp creates a new mock instance.
func NewMockIdp(ctrl *gomock.Controller) *MockIdp {
	mock := &MockIdp{ctrl: ctrl}
	mock.recorder = &MockIdpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdp) EXPECT() *MockIdpMockRecorder {
	return m.recorder
}

// GetAllGroupMembers mocks base method.
func (m *MockIdp) GetAllGroupMembers(ctx context.Context, groups []*schema.Group, users []*schema.User) ([]*schema.GroupMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroupMembers", ctx, groups, users)
	ret0, _ := ret[0].([]*schema.GroupMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroupMembers indicates an expected call of GetAllGroupMembers.
func (mr *MockIdpMockRecorder) GetAllGroupMembers(ctx, groups, users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroupMembers", reflect.TypeOf((*MockIdp)(nil).GetAllGroupMembers), ctx, groups, users)
}

// GetGroupMembers mocks base method.
func (m *MockIdp) GetGroupMembers(ctx context.Context, group *schema.Group, user *schema.User) ([]*schema.GroupMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembers", ctx, group, user)
	ret0, _ := ret[0].([]*schema.GroupMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers.
func (mr *MockIdpMockRecorder) GetGroupMembers(ctx, group, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockIdp)(nil).GetGroupMembers), ctx, group, user)
}

// GetGroups mocks base method.
func (m *MockIdp) GetGroups(ctx context.Context) ([]*schema.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx)
	ret0, _ := ret[0].([]*schema.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockIdpMockRecorder) GetGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockIdp)(nil).GetGroups), ctx)
}

// GetName mocks base method.
func (m *MockIdp) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIdpMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIdp)(nil).GetName))
}

// GetProjectMembers mocks base method.
func (m *MockIdp) GetProjectMembers(ctx context.Context, project *schema.Project, user *schema.User) ([]*schema.ProjectMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectMembers", ctx, project, user)
	ret0, _ := ret[0].([]*schema.ProjectMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectMembers indicates an expected call of GetProjectMembers.
func (mr *MockIdpMockRecorder) GetProjectMembers(ctx, project, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMembers", reflect.TypeOf((*MockIdp)(nil).GetProjectMembers), ctx, project, user)
}

// GetProjects mocks base method.
func (m *MockIdp) GetProjects(ctx context.Context) ([]*schema.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx)
	ret0, _ := ret[0].([]*schema.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockIdpMockRecorder) GetProjects(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockIdp)(nil).GetProjects), ctx)
}

// GetStaticUserById mocks base method.
func (m *MockIdp) GetStaticUserById(id string) (*schema.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticUserById", id)
	ret0, _ := ret[0].(*schema.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticUserById indicates an expected call of GetStaticUserById.
func (mr *MockIdpMockRecorder) GetStaticUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticUserById", reflect.TypeOf((*MockIdp)(nil).GetStaticUserById), id)
}

// GetUsers mocks base method.
func (m *MockIdp) GetUsers(ctx context.Context) ([]*schema.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*schema.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIdpMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIdp)(nil).GetUsers), ctx)
}

// Kind mocks base method.
func (m *MockIdp) Kind() IdpKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(IdpKind)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockIdpMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockIdp)(nil).Kind))
}

// SetApiServerUrl mocks base method.
func (m *MockIdp) SetApiServerUrl(url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetApiServerUrl", url)
}

// SetApiServerUrl indicates an expected call of SetApiServerUrl.
func (mr *MockIdpMockRecorder) SetApiServerUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApiServerUrl", reflect.TypeOf((*MockIdp)(nil).SetApiServerUrl), url)
}

// SetName mocks base method.
func (m *MockIdp) SetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockIdpMockRecorder) SetName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockIdp)(nil).SetName), name)
}

// SetSecretProvider mocks base method.
func (m *MockIdp) SetSecretProvider(provider *secret_provider.SecretProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSecretProvider", provider)
}

// SetSecretProvider indicates an expected call of SetSecretProvider.
func (mr *MockIdpMockRecorder) SetSecretProvider(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecretProvider", reflect.TypeOf((*MockIdp)(nil).SetSecretProvider), provider)
}
