// Code generated by MockGen. DO NOT EDIT.
// Source: target_interface.go

// Package target is a generated GoMock package.
package target

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	idp "github.com/nautes-labs/base-operator/pkg/idp"
	schema "github.com/nautes-labs/base-operator/pkg/schema"
	secret_provider "github.com/nautes-labs/base-operator/pkg/secret_provider"
)

// MockTargetApp is a mock of TargetApp interface.
type MockTargetApp struct {
	ctrl     *gomock.Controller
	recorder *MockTargetAppMockRecorder
}

// MockTargetAppMockRecorder is the mock recorder for MockTargetApp.
type MockTargetAppMockRecorder struct {
	mock *MockTargetApp
}

// NewMockTargetApp creates a new mock instance.
func NewMockTargetApp(ctrl *gomock.Controller) *MockTargetApp {
	mock := &MockTargetApp{ctrl: ctrl}
	mock.recorder = &MockTargetAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetApp) EXPECT() *MockTargetAppMockRecorder {
	return m.recorder
}

// CompareGroups mocks base method.
func (m *MockTargetApp) CompareGroups(idpGroups, targetAppGroups []*schema.Group) ([]*schema.Group, []*schema.Group) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareGroups", idpGroups, targetAppGroups)
	ret0, _ := ret[0].([]*schema.Group)
	ret1, _ := ret[1].([]*schema.Group)
	return ret0, ret1
}

// CompareGroups indicates an expected call of CompareGroups.
func (mr *MockTargetAppMockRecorder) CompareGroups(idpGroups, targetAppGroups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareGroups", reflect.TypeOf((*MockTargetApp)(nil).CompareGroups), idpGroups, targetAppGroups)
}

// CompareProjects mocks base method.
func (m *MockTargetApp) CompareProjects(idpProjects, targetAppProjects []*schema.Project) ([]*schema.Project, []*schema.Project) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareProjects", idpProjects, targetAppProjects)
	ret0, _ := ret[0].([]*schema.Project)
	ret1, _ := ret[1].([]*schema.Project)
	return ret0, ret1
}

// CompareProjects indicates an expected call of CompareProjects.
func (mr *MockTargetAppMockRecorder) CompareProjects(idpProjects, targetAppProjects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareProjects", reflect.TypeOf((*MockTargetApp)(nil).CompareProjects), idpProjects, targetAppProjects)
}

// CompareUsers mocks base method.
func (m *MockTargetApp) CompareUsers(idpUsers, targetAppUsers []*schema.User) ([]*schema.User, []*schema.User) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareUsers", idpUsers, targetAppUsers)
	ret0, _ := ret[0].([]*schema.User)
	ret1, _ := ret[1].([]*schema.User)
	return ret0, ret1
}

// CompareUsers indicates an expected call of CompareUsers.
func (mr *MockTargetAppMockRecorder) CompareUsers(idpUsers, targetAppUsers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareUsers", reflect.TypeOf((*MockTargetApp)(nil).CompareUsers), idpUsers, targetAppUsers)
}

// CreateGroup mocks base method.
func (m *MockTargetApp) CreateGroup(ctx context.Context, group *schema.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockTargetAppMockRecorder) CreateGroup(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockTargetApp)(nil).CreateGroup), ctx, group)
}

// CreateGroupMember mocks base method.
func (m *MockTargetApp) CreateGroupMember(ctx context.Context, groupMember *schema.GroupMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupMember", ctx, groupMember)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroupMember indicates an expected call of CreateGroupMember.
func (mr *MockTargetAppMockRecorder) CreateGroupMember(ctx, groupMember interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupMember", reflect.TypeOf((*MockTargetApp)(nil).CreateGroupMember), ctx, groupMember)
}

// CreateProject mocks base method.
func (m *MockTargetApp) CreateProject(ctx context.Context, project *schema.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockTargetAppMockRecorder) CreateProject(ctx, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockTargetApp)(nil).CreateProject), ctx, project)
}

// CreateProjectMember mocks base method.
func (m *MockTargetApp) CreateProjectMember(ctx context.Context, projectMember *schema.ProjectMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectMember", ctx, projectMember)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProjectMember indicates an expected call of CreateProjectMember.
func (mr *MockTargetAppMockRecorder) CreateProjectMember(ctx, projectMember interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectMember", reflect.TypeOf((*MockTargetApp)(nil).CreateProjectMember), ctx, projectMember)
}

// CreateUser mocks base method.
func (m *MockTargetApp) CreateUser(ctx context.Context, user *schema.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTargetAppMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTargetApp)(nil).CreateUser), ctx, user)
}

// DeleteGroupById mocks base method.
func (m *MockTargetApp) DeleteGroupById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupById indicates an expected call of DeleteGroupById.
func (mr *MockTargetAppMockRecorder) DeleteGroupById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupById", reflect.TypeOf((*MockTargetApp)(nil).DeleteGroupById), ctx, id)
}

// DeleteGroupMemberById mocks base method.
func (m *MockTargetApp) DeleteGroupMemberById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupMemberById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupMemberById indicates an expected call of DeleteGroupMemberById.
func (mr *MockTargetAppMockRecorder) DeleteGroupMemberById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupMemberById", reflect.TypeOf((*MockTargetApp)(nil).DeleteGroupMemberById), ctx, id)
}

// DeleteProjectById mocks base method.
func (m *MockTargetApp) DeleteProjectById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectById indicates an expected call of DeleteProjectById.
func (mr *MockTargetAppMockRecorder) DeleteProjectById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectById", reflect.TypeOf((*MockTargetApp)(nil).DeleteProjectById), ctx, id)
}

// DeleteProjectMemberById mocks base method.
func (m *MockTargetApp) DeleteProjectMemberById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectMemberById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectMemberById indicates an expected call of DeleteProjectMemberById.
func (mr *MockTargetAppMockRecorder) DeleteProjectMemberById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectMemberById", reflect.TypeOf((*MockTargetApp)(nil).DeleteProjectMemberById), ctx, id)
}

// DeleteUserById mocks base method.
func (m *MockTargetApp) DeleteUserById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockTargetAppMockRecorder) DeleteUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockTargetApp)(nil).DeleteUserById), ctx, id)
}

// GenerateIdpGroupIdentity mocks base method.
func (m *MockTargetApp) GenerateIdpGroupIdentity(groupKind, Identity string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateIdpGroupIdentity", groupKind, Identity)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateIdpGroupIdentity indicates an expected call of GenerateIdpGroupIdentity.
func (mr *MockTargetAppMockRecorder) GenerateIdpGroupIdentity(groupKind, Identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateIdpGroupIdentity", reflect.TypeOf((*MockTargetApp)(nil).GenerateIdpGroupIdentity), groupKind, Identity)
}

// GenerateIdpProjectIdentity mocks base method.
func (m *MockTargetApp) GenerateIdpProjectIdentity(Identity string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateIdpProjectIdentity", Identity)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateIdpProjectIdentity indicates an expected call of GenerateIdpProjectIdentity.
func (mr *MockTargetAppMockRecorder) GenerateIdpProjectIdentity(Identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateIdpProjectIdentity", reflect.TypeOf((*MockTargetApp)(nil).GenerateIdpProjectIdentity), Identity)
}

// GenerateIdpUserIdentity mocks base method.
func (m *MockTargetApp) GenerateIdpUserIdentity(Identity string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateIdpUserIdentity", Identity)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateIdpUserIdentity indicates an expected call of GenerateIdpUserIdentity.
func (mr *MockTargetAppMockRecorder) GenerateIdpUserIdentity(Identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateIdpUserIdentity", reflect.TypeOf((*MockTargetApp)(nil).GenerateIdpUserIdentity), Identity)
}

// GetGroupMembers mocks base method.
func (m *MockTargetApp) GetGroupMembers(ctx context.Context) ([]*schema.GroupMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembers", ctx)
	ret0, _ := ret[0].([]*schema.GroupMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers.
func (mr *MockTargetAppMockRecorder) GetGroupMembers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockTargetApp)(nil).GetGroupMembers), ctx)
}

// GetGroups mocks base method.
func (m *MockTargetApp) GetGroups(ctx context.Context) ([]*schema.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx)
	ret0, _ := ret[0].([]*schema.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockTargetAppMockRecorder) GetGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockTargetApp)(nil).GetGroups), ctx)
}

// GetName mocks base method.
func (m *MockTargetApp) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockTargetAppMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTargetApp)(nil).GetName))
}

// GetProjectMembers mocks base method.
func (m *MockTargetApp) GetProjectMembers(ctx context.Context, project *schema.Project, user *schema.User) ([]*schema.ProjectMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectMembers", ctx, project, user)
	ret0, _ := ret[0].([]*schema.ProjectMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectMembers indicates an expected call of GetProjectMembers.
func (mr *MockTargetAppMockRecorder) GetProjectMembers(ctx, project, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMembers", reflect.TypeOf((*MockTargetApp)(nil).GetProjectMembers), ctx, project, user)
}

// GetProjects mocks base method.
func (m *MockTargetApp) GetProjects(ctx context.Context) ([]*schema.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx)
	ret0, _ := ret[0].([]*schema.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockTargetAppMockRecorder) GetProjects(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockTargetApp)(nil).GetProjects), ctx)
}

// GetUsers mocks base method.
func (m *MockTargetApp) GetUsers(ctx context.Context) ([]*schema.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*schema.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockTargetAppMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockTargetApp)(nil).GetUsers), ctx)
}

// GroupBindingProjects mocks base method.
func (m *MockTargetApp) GroupBindingProjects(ctx context.Context, projects []*schema.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupBindingProjects", ctx, projects)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupBindingProjects indicates an expected call of GroupBindingProjects.
func (mr *MockTargetAppMockRecorder) GroupBindingProjects(ctx, projects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupBindingProjects", reflect.TypeOf((*MockTargetApp)(nil).GroupBindingProjects), ctx, projects)
}

// IdentityKey mocks base method.
func (m *MockTargetApp) IdentityKey() TargetAppKindName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentityKey")
	ret0, _ := ret[0].(TargetAppKindName)
	return ret0
}

// IdentityKey indicates an expected call of IdentityKey.
func (mr *MockTargetAppMockRecorder) IdentityKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityKey", reflect.TypeOf((*MockTargetApp)(nil).IdentityKey))
}

// Kind mocks base method.
func (m *MockTargetApp) Kind() TargetAppKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(TargetAppKind)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockTargetAppMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockTargetApp)(nil).Kind))
}

// SetApiServerUrl mocks base method.
func (m *MockTargetApp) SetApiServerUrl(url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetApiServerUrl", url)
}

// SetApiServerUrl indicates an expected call of SetApiServerUrl.
func (mr *MockTargetAppMockRecorder) SetApiServerUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApiServerUrl", reflect.TypeOf((*MockTargetApp)(nil).SetApiServerUrl), url)
}

// SetIdp mocks base method.
func (m *MockTargetApp) SetIdp(arg0 idp.Idp) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIdp", arg0)
}

// SetIdp indicates an expected call of SetIdp.
func (mr *MockTargetAppMockRecorder) SetIdp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIdp", reflect.TypeOf((*MockTargetApp)(nil).SetIdp), arg0)
}

// SetName mocks base method.
func (m *MockTargetApp) SetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockTargetAppMockRecorder) SetName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockTargetApp)(nil).SetName), name)
}

// SetSecretProvider mocks base method.
func (m *MockTargetApp) SetSecretProvider(provider *secret_provider.SecretProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSecretProvider", provider)
}

// SetSecretProvider indicates an expected call of SetSecretProvider.
func (mr *MockTargetAppMockRecorder) SetSecretProvider(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecretProvider", reflect.TypeOf((*MockTargetApp)(nil).SetSecretProvider), provider)
}

// SyncGroupMember mocks base method.
func (m *MockTargetApp) SyncGroupMember(ctx context.Context, idpGroupMembers, targetAppGroupMembers []*schema.GroupMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncGroupMember", ctx, idpGroupMembers, targetAppGroupMembers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncGroupMember indicates an expected call of SyncGroupMember.
func (mr *MockTargetAppMockRecorder) SyncGroupMember(ctx, idpGroupMembers, targetAppGroupMembers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncGroupMember", reflect.TypeOf((*MockTargetApp)(nil).SyncGroupMember), ctx, idpGroupMembers, targetAppGroupMembers)
}

// UpdateGroup mocks base method.
func (m *MockTargetApp) UpdateGroup(ctx context.Context, id string, group *schema.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, id, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockTargetAppMockRecorder) UpdateGroup(ctx, id, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockTargetApp)(nil).UpdateGroup), ctx, id, group)
}

// UpdateGroupMember mocks base method.
func (m *MockTargetApp) UpdateGroupMember(ctx context.Context, id string, groupMember *schema.GroupMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupMember", ctx, id, groupMember)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupMember indicates an expected call of UpdateGroupMember.
func (mr *MockTargetAppMockRecorder) UpdateGroupMember(ctx, id, groupMember interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupMember", reflect.TypeOf((*MockTargetApp)(nil).UpdateGroupMember), ctx, id, groupMember)
}

// UpdateProject mocks base method.
func (m *MockTargetApp) UpdateProject(ctx context.Context, id string, project *schema.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, id, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockTargetAppMockRecorder) UpdateProject(ctx, id, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockTargetApp)(nil).UpdateProject), ctx, id, project)
}

// UpdateProjectMember mocks base method.
func (m *MockTargetApp) UpdateProjectMember(ctx context.Context, id string, projectMember *schema.ProjectMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectMember", ctx, id, projectMember)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectMember indicates an expected call of UpdateProjectMember.
func (mr *MockTargetAppMockRecorder) UpdateProjectMember(ctx, id, projectMember interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectMember", reflect.TypeOf((*MockTargetApp)(nil).UpdateProjectMember), ctx, id, projectMember)
}

// UpdateUser mocks base method.
func (m *MockTargetApp) UpdateUser(ctx context.Context, id string, user *schema.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockTargetAppMockRecorder) UpdateUser(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockTargetApp)(nil).UpdateUser), ctx, id, user)
}

// WrappingUpAfterGroupSync mocks base method.
func (m *MockTargetApp) WrappingUpAfterGroupSync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrappingUpAfterGroupSync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WrappingUpAfterGroupSync indicates an expected call of WrappingUpAfterGroupSync.
func (mr *MockTargetAppMockRecorder) WrappingUpAfterGroupSync(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrappingUpAfterGroupSync", reflect.TypeOf((*MockTargetApp)(nil).WrappingUpAfterGroupSync), ctx)
}
